(ns toastermachine.api
  (:require [dahl :as d]
            [protean.api.transformation.sim :as sim]))

(def entrypoint "api/toastermachine")

(def atom-nodes (atom [{:Ready nil}]))

(def atom-edges (atom nil))

(def graph
  {:Ready {:select-settings :Settings}
   :Settings {:add-bread-mode :Settings
              :add-strength :Settings
              :make-toast :MakingToast}
   :MakingToast {:shutdown :ShutDown
                 :complete-machine :MadeToast}
   :MadeToast {:shutdown :ShutDown}
   :Shutdown {}})

(def rules
  {:Settings (fn [n]
    {:Settings (dissoc (get graph :Settings)
                       (when-not (get-in (last n) [:Settings :breadmode])
                         :make-toast))})
   :MakingToast (fn [_]
     (future (Thread/sleep 10000)
             (when (= (d/current-node-key @atom-nodes) :MakingToast)
               (swap! atom-nodes d/update-node {:MadeToast nil}))))})

(defn create-select
  [name label options]
  [:div {:class "form-group"}
    [:label {:for name} label]
    (concat
      [:select {:class "form-control" :id name :name name :required "required"}]
      [[:option {:value "" } (str "Select a " label)]]
      (for [x options] [:option {:value x} x]))])

(def bodies
  {:Settings {:add-bread-mode (create-select "breadmode" "Bread Mode" ["bread" "croissant"])
              :add-strength (create-select "strength" "Strength" [0 1 2 3 4 5])}})

(defn handler
  [req {:keys [status nodes edges result]}]
  (when nodes (reset! atom-nodes nodes))
  (when edges (reset! atom-edges edges))
  (sim/response req status result))

{
  "api" {
    "toastermachine" {
      :get #(handler % (d/get entrypoint @atom-nodes graph rules bodies))
    }
    "toastermachine/${uuid}" {
      :post #(handler % (d/post entrypoint @atom-nodes @atom-edges graph rules
                                bodies (sim/path-param % "uuid") (sim/body-clj % true)))
    }
  }
}
