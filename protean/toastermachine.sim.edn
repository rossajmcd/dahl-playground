(ns toastermachine.api
  (:require [dahl :as d]
            [protean.api.transformation.sim :refer :all]))

(def entrypoint "api/toastermachine")

(def atom-nodes (atom [{:Ready nil}]))

(def atom-edges (atom nil))

(def graph
  {:Ready {:select-settings :Settings}
   :Settings {:add-bread-mode :Settings
              :add-strength :Settings
              :make-toast :MakingToast}
   :MakingToast {:shutdown :ShutDown
                 :complete-machine :MadeToast}
   :MadeToast {:shutdown :ShutDown}
   :Shutdown {}})

(def rules
  {:MakingToast #(future
                   (Thread/sleep 10000)
                   (when (= (d/current-node-key @atom-nodes) :MakingToast)
                     (swap! atom-nodes d/update-node {:MadeToast nil})))
   :Settings #(do
               {:Settings (dissoc
                 (get graph :Settings)
                 (when-not (get-in (last @atom-nodes) [:Settings :breadmode]) :make-toast))})})

(def bodies
  {:Settings {:add-bread-mode {:breadmode #{"bread" "croissant"}}
              :add-strength {:strength #{1 2 3 4 5}}}})

{
  "api" {
    "toastermachine" {
      :get (fn [req]
        (let [nodes @atom-nodes
              curr-n (d/current-node-key nodes)
              uuids (reset! atom-edges (d/generate-uuids graph rules curr-n))]
          (respond req 200 (d/result entrypoint nodes uuids curr-n bodies))))
    }
    "toastermachine/${uuid}" {
      :post (fn [req]
        (let [uuid (path-param req "uuid")
              body (body-clj req true)
              nodes @atom-nodes
              edges @atom-edges
              edge (d/get-edge edges uuid)
              curr-n (d/current-node-key nodes)
              errors (when-let [e (d/errors curr-n bodies edge body uuid edges)]
                       (assoc (d/result entrypoint nodes edges curr-n bodies) :errors e))]
          (cond
            (nil? edge) (respond req 404 errors)
            errors      (respond req 400 errors)
            :else       (let [next-n (d/next-node-key graph curr-n edge)
                              states (swap! atom-nodes d/update-node {next-n body})
                              uuids (reset! atom-edges (d/generate-uuids graph rules next-n))]
                          (respond req 200 (d/result entrypoint states uuids next-n bodies))))))
    }
  }
}
