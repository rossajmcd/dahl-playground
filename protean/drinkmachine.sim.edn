(ns drinkmachine.api
  (:require [dahl :as d]
            [protean.api.transformation.sim :refer :all]))

(def entrypoint "api/drinkmachine")

(def atom-nodes (atom [{:Ready nil}]))

(def atom-edges (atom nil))

(def graph
  {:Ready {:select-ingredients :Ingredients}
   :Ingredients {:add-beverage-required :Ingredients
                 :add-milk :Ingredients
                 :add-sugar :Ingredients
                 :make-drink :MakingDrink}
   :MakingDrink {:shutdown :ShutDown
                 :complete-machine :MadeDrink}
   :MadeDrink {:shutdown :ShutDown}
   :Shutdown {}})

(def rules
   {:Ingredients (fn [n]
      {:Ingredients (dissoc (:Ingredients graph)
                            (when-not (get-in (last n) [:Ingredients :beverage])
                              :make-drink))})
    :MakingDrink (fn [_]
      (future (Thread/sleep 10000)
              (when (= (d/current-node-key @atom-nodes) :MakingDrink)
                (swap! atom-nodes d/update-node {:MadeDrink nil}))))})

(def bodies
  {:Ingredients {:add-beverage-required {:beverage #{"tea" "coffee"}}
                 :add-milk {:milk #{"none" "semi" "full"}}
                 :add-sugar {:sugar #{0 1 2}}}})

(defn handler
  [req {:keys [status nodes edges result]}]
  (when nodes (reset! atom-nodes nodes))
  (when edges (reset! atom-edges edges))
  (respond req status result))

{
  "api" {
    "drinkmachine" {
      :get #(handler % (d/get entrypoint @atom-nodes graph rules bodies))
    }
    "drinkmachine/${uuid}" {
      :post #(handler % (d/post entrypoint @atom-nodes @atom-edges graph rules
                                bodies (path-param % "uuid") (body-clj % true)))
    }
  }
}
