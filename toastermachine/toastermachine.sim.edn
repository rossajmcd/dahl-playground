(ns toastermachine.api
  (:require [clojure.string :as str]
            [protean.api.transformation.sim :refer :all]))

(def resource "toastermachine")

(def uri-base (str "/api/" resource))

(def atom-nodes (atom [{:Ready nil}]))

(def atom-edges (atom nil))

(defn current-node-key [nodes] (first (keys (last nodes))))

(defn next-node-key
  [graph node-key edge]
  (get-in graph [node-key edge]))

(defn update-node
  [a b]
  (let [[k v] (first b)]
    (if-let [idx (some #(when (get % k) (.indexOf a %)) a)]
      (update-in a [idx k] merge v)
      (conj a b))))

(def graph
  {:Ready {:select-settings :Settings}
   :Settings {:add-bread-mode :Settings
                 :add-strength :Settings
                 :make-toast :MakingToast}
   :MakingToast {:shutdown :ShutDown
                 :complete-machine :MadeToast}
   :MadeToast {:shutdown :ShutDown}
   :Shutdown {}})

(def rules
  {:MakingToast #(future
                   (Thread/sleep 10000)
                   (when (= (current-node-key @atom-nodes) :MakingToast)
                     (swap! atom-nodes update-node {:MadeToast nil})))
   :Settings #(do
                   {:Settings (dissoc
                     (get graph :Settings)
                     (when-not (get-in (last @atom-nodes) [:Settings :breadmode]) :make-toast))})})

(def bodies
  {:Settings {:add-bread-mode {:breadmode #{"bread" "croissant"}}
                 :add-strength {:strength #{1 2 3 4 5}}}})

(defn apply-rule
  [graph node-key rules]
  (let [r (when-let [rule (get rules node-key)] (apply rule []))]
    (cond
      (nil? node-key) node-key
      (map? r)        r
      (future? r)     {node-key (get graph node-key)}
      :else           {node-key (get graph node-key)})))

(defn result
  [graph node-key bodies]
  (let [result (apply-rule graph node-key rules)
        all (flatten (map keys (vals result)))
        edges (remove #(or (nil? %) (str/includes? (name %) "-machine")) all)]
    (reset! atom-edges (into {} (for [edge edges] {edge (str (java.util.UUID/randomUUID))})))
    {:resource resource
     :states @atom-nodes
     :controls (into {} (for [edge edges]
       {edge {:method "post"
              :href (str "/api/toastermachine/" (get @atom-edges edge))
              :body (when-let [b (get-in bodies [node-key edge])]
                      (clojure.data.json/write-str b))}}))}))
{
  "api" {
    "toastermachine" {
      :get #(respond % 200 (result graph (current-node-key @atom-nodes) bodies))
    }
    "toastermachine/${uuid}" {
      :post (fn [req]
        (let [uuid (path-param req "uuid")
              edge (get (clojure.set/map-invert @atom-edges) uuid)
              curr-n (current-node-key @atom-nodes)
              errors (->> (get-in bodies [curr-n edge])
                          (remove (fn [[k vs]] (.contains vs (body-param req (name k)))))
                          (map (fn [[k vs]] (str (name k) ": '" (body-param req (name k)) "' does not match one of: [" (str/join ", " vs) "]")))
                          seq)]
          (cond
            (nil? edge) (respond req 404 (assoc (result graph curr-n bodies) :errors [(str "uuid: '" uuid "' does not match one of: [" (str/join ", " (vals @atom-edges)) "]")]))
            errors      (respond req 400 (assoc (result graph curr-n bodies) :errors errors))
            :else       (let [next-n (next-node-key graph curr-n edge)
                              data {next-n (body-clj req true)}]
                           (swap! atom-nodes update-node data)
                           (respond req 200 (result graph next-n bodies))))))
    }
  }
}
